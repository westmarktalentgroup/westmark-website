name: Westmark Production Protection

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  production-protection:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Detect unauthorized deployment attempts
      run: |
        echo "üõ°Ô∏è GITHUB ACTIONS PRODUCTION PROTECTION"
        echo "======================================"
        
        # Check if this is a direct push to main (should be blocked)
        if [[ "${{ github.event_name }}" == "push" ]]; then
          echo "üö® CRITICAL: Direct push to main branch detected"
          echo "‚ùå This should be blocked by local git hooks"
          echo "üîí Deployment blocked for security"
          exit 1
        fi
        
        # Check if this is a pull request (allowed)
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "‚úÖ Pull request detected - proceeding with checks"
        fi
        
        # Verify required files exist
        REQUIRED_FILES=(
          "index.html"
          "clients.html"
          "contact-us.html"
          "assets/css/optimized.css"
          "assets/js/consolidated.js"
        )
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "üö® CRITICAL: Required production file missing: $file"
            echo "üîí Deployment blocked for security"
            exit 1
          fi
        done
        
        echo "‚úÖ All required files present"
        
    - name: Validate deployment workflow
      run: |
        echo "üîç Validating deployment workflow..."
        
        # Check if development directory exists
        if [[ ! -d "development" ]]; then
          echo "üö® CRITICAL: Development directory missing"
          echo "üîí Deployment blocked for security"
          exit 1
        fi
        
        # Check if protection scripts exist
        REQUIRED_SCRIPTS=(
          "scripts/protection-system.sh"
          "scripts/ai-agent-workflow-enforcer.sh"
          "scripts/architectural-enforcer.sh"
          "scripts/production-protection.sh"
          "scripts/ai-circumvention-protection.sh"
        )
        
        for script in "${REQUIRED_SCRIPTS[@]}"; do
          if [[ ! -f "$script" ]]; then
            echo "üö® CRITICAL: Required protection script missing: $script"
            echo "üîí Deployment blocked for security"
            exit 1
          fi
        done
        
        echo "‚úÖ All protection scripts present"
        
    - name: Security validation
      run: |
        echo "üîê Running security validation..."
        
        # Check for suspicious patterns in commit messages
        if git log -1 --pretty=%B | grep -iE "(bypass|circumvent|force|override|skip)" >/dev/null; then
          echo "üö® CRITICAL: Suspicious commit message detected"
          echo "üîí Deployment blocked for security"
          exit 1
        fi
        
        # Check for large file additions (potential security risk)
        if git diff --stat HEAD~1 | grep -E "(\+.*[0-9]{4,})" >/dev/null; then
          echo "‚ö†Ô∏è  WARNING: Large file changes detected"
          echo "üîç Reviewing changes..."
        fi
        
        echo "‚úÖ Security validation passed"
        
    - name: Deploy to GitHub Pages
      if: github.event_name == 'pull_request' && github.event.action == 'opened'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        
    - name: Block unauthorized deployments
      if: github.event_name == 'push'
      run: |
        echo "üö® UNAUTHORIZED DEPLOYMENT ATTEMPT BLOCKED"
        echo "=========================================="
        echo "‚ùå Direct pushes to main branch are not allowed"
        echo "‚úÖ Use the proper deployment workflow:"
        echo "   1. Work in development/ directory"
        echo "   2. Test changes locally"
        echo "   3. Run: ./scripts/deploy.sh"
        echo "   4. Deploy script handles production update"
        echo ""
        echo "üõ°Ô∏è This protection ensures:"
        echo "   ‚Ä¢ All changes are properly tested"
        echo "   ‚Ä¢ Backups are created automatically"
        echo "   ‚Ä¢ Production integrity is maintained"
        echo "   ‚Ä¢ AI agents cannot bypass deployment controls"
        exit 1
